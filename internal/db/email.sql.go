// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email.sql

package db

import (
	"context"
	"time"
)

const getEmail = `-- name: GetEmail :one
SELECT id, created_at, subject, from_email, to_email, date_sent, html_body, text_body
FROM email
WHERE id = $1
`

func (q *Queries) GetEmail(ctx context.Context, id int32) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Subject,
		&i.FromEmail,
		&i.ToEmail,
		&i.DateSent,
		&i.HtmlBody,
		&i.TextBody,
	)
	return i, err
}

const insertEmail = `-- name: InsertEmail :one
INSERT INTO email (created_at, subject, from_email, to_email, date_sent, html_body, text_body)
VALUES (NOW(), $1, $2, $3, $4, $5, $6)
RETURNING id, created_at, subject, from_email, to_email, date_sent, html_body, text_body
`

type InsertEmailParams struct {
	Subject   string
	FromEmail string
	ToEmail   string
	DateSent  time.Time
	HtmlBody  string
	TextBody  string
}

func (q *Queries) InsertEmail(ctx context.Context, arg InsertEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, insertEmail,
		arg.Subject,
		arg.FromEmail,
		arg.ToEmail,
		arg.DateSent,
		arg.HtmlBody,
		arg.TextBody,
	)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Subject,
		&i.FromEmail,
		&i.ToEmail,
		&i.DateSent,
		&i.HtmlBody,
		&i.TextBody,
	)
	return i, err
}
